################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
library(shiny); runApp('project/aaaaaashiny.R')
runApp('project')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
library(shiny); runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
shiny::runApp('project')
runApp('project')
runApp('project')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/testshiny.R')
library(shiny); runApp('project/aaaaaashiny.R')
library(shiny); runApp('project/testshiny.R')
library(shiny); runApp('project/testshiny.R')
runApp('project/testshiny.R')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
library(msqrob2gui)
launchMsqrob2App()
launchMsqrob2App()
################################################################################
### Exact test of goodness-of-fit
################################################################################
## Mendelian inheritance experiment (Conover, 1971)
# Plants of two particular genotypes produce progeny
# 1/4 "dwarf" and 3/4 "giant"
# Experiment cross results: 243 dwarf and 682 giant plants
# If "giant" is taken as success,
# H0 is p = 3/4 (alternative != 3/4, p is hypothesized probability of success)
# -> use exact binomial test
binom.test(c(682, 243), p = 3/4)
binom.test(682, 682 + 243, p = 3/4) # same
# -> p-value = 0.3825 -> H0 not rejected
# OR
binom.test(c(243, 682), p = 1/4)
## Bark beetle experiment
# Experiments how parasitoid wasps find beetles
# Wasps in Y-shaped tube with different odors in arms:
# odor bark eaten by adult beetles,
# other arm bark eaten by larval beetles
# 10 wasps entered "adult" odor arm, 17 "larval" odor arm
binom.test(c(10,17), p = 0.5)
binom.test(c(17,10), p = 0.5) # same for 0.5
# -> p-value = 0.2478 -> H0 not rejected
# Other experiment infested bark vs mixed infested uninfested
# 36 wasp entered "infested" arm, 7 entered "mixture" arm
binom.test(c(7,36), p = 0.5)
binom.test(c(36,7), p = 0.5) # same for 0.5
################################################################################
### Chi Square test of goodness-of-fit
################################################################################
# European crossbills have tip of upper bill
# either right or left of the lower bill
# Frequency dependent selection keep 1:1 ratio
# Observation: 1752 right-billed, 1895 left-billed
# H0: p = 1:1, H1: p != 1:1
# correct = FALSE to turn off Yatesâ€™ correction
chisq.test(c(1752,1895), correct = FALSE)
# --> X-squared = 5.6071, p-value = 0.01789 < 0,05
# --> reject H0 --> significantly more left-billed
# OR:
chisq.test(c(1752,1895), correct = FALSE, p = c(0.5,0.5))
################################################################################
### G-test of goodness-of-fit
################################################################################
# Tools for Descriptive Statistics incl. GTest
# install.packages("DescTools")
library(DescTools)
# Log likelihood ratio (G-test) goodness of fit test
# on crossbills observations
GTest(c(1752,1895))
################################################################################
### Chi Square test of independence
################################################################################
## Jackson et al. (2013)
#  Collected data on reactions to vaccines in children
nosevere <- c(4758,8840)
severe <- c(30,76)
children <- data.frame(nosevere, severe,
row.names = c("thigh","arm"))
# Chi-square test
chisq.test(children, correct = FALSE)
################################################################################
### G-test of independence
################################################################################
# chisq.test(children, correct = FALSE)
# --> X-squared = 2.07, p-value = 0.15 > 0.05
library(DescTools)
GTest(children)
################################################################################
### Cochran-Mantel-Haenszel test
################################################################################
# mantelhaen.test requires 3D contingency table in array form
niacin_array <- array(c(2,11,46,41, # FATS study
4,12,67,60, # AFREGS study
1, 4,86,76, # ARBITER.2 study
1, 6,37,32, # HATS study
2, 1,92,93),# CLAS.1 study
dim = c(2, 2, 5), # 2x2 for each study
dimnames = list(
Treatment = c("Niacin", "Placebo"),
Revasc = c("Yes", "No"),
Study = c("FATS", "AFREGS", "ARBITER.2",
"HATS", "CLAS.1")))
dim(niacin_array) # 2 2 5
# View and verify the data in the array
niacin_array
# Perform the test
mantelhaen.test(niacin_array)
binom.test(c(140,106), p = 0.5)
test = [["attacked", "not"], [26,74], [10,90]]
test = [["attacked", "not"], [10, 90], [26, 74]]
test <- matrix(c("attacked", "not",
10, 90,
26, 74),
nrow = 3, byrow = TRUE)
test <- matrix(c("attacked", "not",
10, 90,
26, 74))
print(test)
chisq.test(test, correct = FALSE)
vacc <- c(10, 900)
nonvacc <- c(26, 74)
children <- data.frame(novaccsevere, sevnonvaccere,
row.names = c("attacked","not"))
# Chi-square test
chisq.test(children, correct = FALSE)
vacc <- c(10, 900)
nonvacc <- c(26, 74)
children <- data.frame(novaccsevere, nonvacc,
row.names = c("attacked","not"))
vacc <- c(10, 900)
nonvacc <- c(26, 74)
children <- data.frame(vacc, nonvacc,
row.names = c("attacked","not"))
# Chi-square test
chisq.test(children, correct = FALSE)
mussels <- matrix(c("attacked", "not",
10, 90,
26, 74))
mussels
mussels <- array(c(56,40,,69,77,
61,57,257,301,
73,71,65,79,
71,55,48,48))
mussels <- array(c(56,40,,69,77,
61,57,257,301,
73,71,65,79,
71,55,48,48),
dim(2,2,4))
mussels <- array(c(56,40,,69,77,
73,71,65,79,
mantelhaen.test(mussels)
mantelhaen.test(mussels)
mussels <- array(c(56,40,,69,77,
73,71,65,79,
dim(2,2,4),
treatement("94", "non94"),
location("tilla","yaqu","alse","umpq")
mussels
mussels <- array(c(56,40,,69,77,
73,71,65,79,
dim(2,2,4),
treatement("94", "non94"),
location("tilla","yaqu","alse","umpq")
mussels
# Create the 3D array correctly
mussels <- array(
c(56,40,69,77,
61,57,257,301,
73,71,65,79,
71,55,48,48),
dim = c(2,2,4),  # Correct dimension syntax
dimnames = list(
treatment = c("94", "non94"),
collected = c("marine", "estuarine"),
location = c("tilla", "yaqu", "alse", "umpq")
)
)
# Print the array
print(mussels)
# Perform Mantel-Haenszel test
mantelhaen.test(mussels)
shiny::runApp('project')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/testshiny.R')
mussels <- array(
c(56,40,69,77,
61,57,257,301,
73,71,65,79,
71,55,48,48),
dim = c(2,2,4),
dimnames = list(
treatment = c("94", "non94"),
collected = c("marine", "estuarine"),
location = c("tilla", "yaqu", "alse", "umpq")
)
)
# Print the array
print(mussels)
# Perform Mantel-Haenszel test
mantelhaen.test(mussels)
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project')
runApp('project')
runApp('project')
runApp('project')
runApp('project')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project')
runApp('project')
runApp('project/aaaaaashiny.R')
code
# For example:
# In the EDA tab, 3D Scatter Plot, and Radar Chart functions
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project')
runApp('project')
runApp('project')
runApp('project')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
library(shiny); runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/testshiny.R')
runApp('project/testshiny.R')
runApp('project/testshiny.R')
runApp('project/testshiny.R')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project')
runApp('project/aaaaaashiny.R')
runApp('project/aaaaaashiny.R')
runApp('project/testshiny.R')
runApp('project/aaaaaashiny.R')
runApp('project')
runApp('project')
runApp('project')
runApp('project/aaaaaashiny.R')
runApp('project')
runApp('project')
runApp('project')
runApp('project')
################################################################################
### Correlation and regression
################################################################################
## Iris dataset
data(iris)
# Data petal length and sepal length
iris[,c("Petal.Length","Sepal.Length")]
## Correlation
# Most usual measure is Pearson coefficient:
# covariance of two variables divided by
# the product of their variance (scaled -1 to 1)
#  1 = perfect positive correlation
# -1 = perfect negative correlation
#  0 = complete randomness
cor(iris[,c("Petal.Length","Sepal.Length")],
method = "pearson")
# Test if this coefficient is significant
cor.test(iris$Petal.Length, iris$Sepal.Length,
method = "pearson")
## Linear regression: fit linear model
iris.lm <- lm(iris$Sepal.Length ~ iris$Petal.Length)
iris.lm
summary(iris.lm)
# Scatterplot
plot(iris$Petal.Length, iris$Sepal.Length,
main = "Petal length versus sepal length",
cex.main = 1.5,
cex = 0.7,
xlim = c(0,8),
ylim = c(0,8),
xlab = "Petal length",
ylab = "Sepal length")
# Add regression line
abline(iris.lm, col = "red")
abline(iris.lm$coefficients[1], # intercept
iris.lm$coefficients[2], # slope
col = "blue",
lty = 3,
lwd = 3)
# Check model assumptions graphically
par(mfrow=c(2,2))
plot(iris.lm)
################################################################################
### Ancova: Analysis of covariance
################################################################################
setwd("/media/sf_VMshare/BIT04-R/Rdatasets/")
crickets <- read.csv("crickets-dataset.csv",
sep = ",", header = TRUE)
str(crickets)
# Set species colors
crickets$Species <- as.factor(crickets$Species)
crickets.col <- crickets$Species
levels(crickets.col) <- list("black"="Oexcl",
"red"="Oniv")
crickets.col <- as.character(crickets.col)
crickets.col
## Plot data
par(mfrow=c(1,1))
plot(crickets$Temp,
crickets$PulsesPerSec,
col = crickets.col,
pch = 16, cex = 0.8,
xlab = "Temperature",
ylab = "Pulse")
legend('bottomright',
legend = levels(crickets$Species),
col = 1:2, pch = 16, cex = 0.8)
## Mean temp
mean(crickets[,"Temp"]) # 23.76Â°C
mean(crickets[crickets$Species=="Oexcl","Temp"]) # 22.12Â°C
mean(crickets[crickets$Species=="Oniv","Temp"])  # 25.76Â°C
# Average temp 3.6Â°C higher in O. exclamationis
## Mean pulses
mean(crickets[,"PulsesPerSec"]) # 72.89
mean(crickets[crickets$Species=="Oexcl","PulsesPerSec"]) # 85.59
mean(crickets[crickets$Species=="Oniv","PulsesPerSec"])  # 62.43
### R environment
# setwd("/media/sf_VMshare/BIT08-R")
setwd("C:/Users/emile/OneDrive - Hogeschool West-Vlaanderen/SF/bit08-R")
# list defined variables/data in workspace
ls()
# remove str1
str1 <- "This string needn't escaped char"
str1
rm(str1)
# show current working directory
getwd()
library(xlsx)
### Bioconductor packages
# https://bioconductor.org/install/
install.packages("BiocManager")
library(BiocManager)
library(mosaicData)
install.packages("mosaicData")
library(mosaicData)
hm.df <- HELPmiss
str(hm.df)
library(ggplot2)
ggplot(hm.df, aes(x=racegrp, fill=factor(substance))) +
geom_bar(position="dodge") +
scale_fill_manual(values=c("black", "red", "green", "blue")) +
labs(title="Substance Usage by Race Group", x="Race Group", y="Count", fill="Substance Usage") +
theme_minimal()
library(RColorBrewer)
# Variables to plot
vars <- c("age", "cesd", "d1", "avg_drinks", "mcs", "pcs")
# Set colors
colors <- brewer.pal(4, "Set2")
# Create the figure
par(mfrow=c(2,3))
for (var in vars) {
barplot(table(hm.df[[var]]), col=colors, main=var)
}
library(dplyr)
# Prepare the data
hm.df <- hm.df %>% select(anysub, racegrp, homeless) %>% na.omit()
# Perform Chi-square test
test_result <- chisq.test(table(hm.df$anysub, hm.df$racegrp, hm.df$homeless))
# Output test result
print(test_result)
### Factors
# gender data
gender <- c("male","male","female","male","female")
gender
class(gender)
gender <- factor(gender)
gender
class(gender)
### Missing values (NA)
y <- c(2,4,NA,8)
y
# is.na() function indicates which elements are missing
is.na(y) # -> returns a vector (FALSE FALSE TRUE FALSE)
library(mosaicData)
library(ggplot2)
library(RColorBrewer)
library(tidyr)
library(dplyr)
# A) Load HELPmiss dataset
hm.df <- HELPmiss
str(hm.df)
# B) Grouped barplot showing substance usage per race group
substance_vars <- c("alcohol", "cocaine", "heroin")
race_colors <- c("black" = "black", "hispanic" = "red", "white" = "green", "other" = "blue")
# Summarizing data for plotting
substance_counts <- hm.df %>%
group_by(racegrp) %>%
summarise(
alcohol = sum(alcohol, na.rm = TRUE),
cocaine = sum(cocaine, na.rm = TRUE),
heroin = sum(heroin, na.rm = TRUE)
) %>%
pivot_longer(-racegrp, names_to = "substance", values_to = "count")
# Plot
p <- ggplot(substance_counts, aes(x = substance, y = count, fill = racegrp)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
scale_fill_manual(values = race_colors) +
labs(title = "Substance usage per race group", x = "", y = "Count") +
theme_minimal()
print(p)
# C) Boxplots for selected variables by race group
selected_vars <- c("age", "cesd", "d1", "avg_drinks", "mcs", "pcs")
par(mfrow = c(2, 3))  # Arrange plots in a 2x3 layout
for (var in selected_vars) {
boxplot(hm.df[[var]] ~ hm.df$racegrp, col = brewer.pal(4, "Set2"),
main = paste("Boxplot of", var, "by Race Group"),
xlab = "Race Group", ylab = var, outline = FALSE)
}
par(mfrow = c(1, 1))  # Reset layout
# D) Format data and perform test
hm.df %>%
select(anysub, racegrp, homeless) %>%
drop_na() %>%
group_by(racegrp, homeless, anysub) %>%
summarise(count = n(), .groups = 'drop') %>%
pivot_wider(names_from = anysub, values_from = count, values_fill = 0) -> formatted_data
print(formatted_data)
# Perform Chi-square test
test_result <- chisq.test(formatted_data[,-(1:2)])
print(test_result)
# Conclusion
if (test_result$p.value < 0.05) {
cat("There is a significant difference in substance use post detox across race groups among homeless and housed individuals.\n")
} else {
cat("There is no significant difference in substance use post detox across race groups among homeless and housed individuals.\n")
}
R.home("bin")
R.home("bin")
R.home("bin")
R.home("bin")
shiny::runApp('C:/Users/emile/OneDrive - Hogeschool West-Vlaanderen/BIT11 Internship in Belgium or abroad/prep')
shiny::runApp('C:/Users/emile/OneDrive - Hogeschool West-Vlaanderen/BIT11 Internship in Belgium or abroad/prep/dPCR-demo')
shiny::runApp("dPCR-demo")
shiny::runApp("C:\Users\emile\OneDrive - Hogeschool West-Vlaanderen\BIT11 Internship in Belgium or abroad\prep\dPCR-demo")
shiny::runApp("C:/Users/emile/OneDrive - Hogeschool West-Vlaanderen/BIT11 Internship in Belgium or abroad/prep/dPCR-demo")
shiny::runApp("C:/Users/emile/OneDrive - Hogeschool West-Vlaanderen/BIT11 Internship in Belgium or abroad/prep/dPCR-demo")
shiny::runApp("C:/Users/emile/OneDrive - Hogeschool West-Vlaanderen/BIT11 Internship in Belgium or abroad/prep/dPCR-demo")
shiny::runApp("C:/Users/emile/OneDrive - Hogeschool West-Vlaanderen/BIT11 Internship in Belgium or abroad/prep/dPCR-demo")
shiny::runApp("C:\Users\emile\OneDrive - Hogeschool West-Vlaanderen\BIT11 Internship in Belgium or abroad\prep\dPCR-demo")
shiny::runApp("C:/Users/emile/OneDrive - Hogeschool West-Vlaanderen/BIT11 Internship in Belgium or abroad/prep/dPCR-demo")
options(shiny.trace = TRUE)
shiny::runApp("C:/Users/emile/OneDrive - Hogeschool West-Vlaanderen/BIT11 Internship in Belgium or abroad/prep/dPCR-demo", display.mode = "normal")
setwd("C:/Users/emile/OneDrive - Hogeschool West-Vlaanderen/BIT11 Internship in Belgium or abroad/prep/dPCR-demo")
shiny::runApp(".")
